// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/francislennon17/pizza-code-sample-golang/m/v2/internal/entities (interfaces: IPizzaUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/francislennon17/pizza-code-sample-golang/m/v2/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockIPizzaUsecase is a mock of IPizzaUsecase interface.
type MockIPizzaUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIPizzaUsecaseMockRecorder
}

// MockIPizzaUsecaseMockRecorder is the mock recorder for MockIPizzaUsecase.
type MockIPizzaUsecaseMockRecorder struct {
	mock *MockIPizzaUsecase
}

// NewMockIPizzaUsecase creates a new mock instance.
func NewMockIPizzaUsecase(ctrl *gomock.Controller) *MockIPizzaUsecase {
	mock := &MockIPizzaUsecase{ctrl: ctrl}
	mock.recorder = &MockIPizzaUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPizzaUsecase) EXPECT() *MockIPizzaUsecaseMockRecorder {
	return m.recorder
}

// GetPizzaByID mocks base method.
func (m *MockIPizzaUsecase) GetPizzaByID(arg0 string) (entities.Pizza, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPizzaByID", arg0)
	ret0, _ := ret[0].(entities.Pizza)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPizzaByID indicates an expected call of GetPizzaByID.
func (mr *MockIPizzaUsecaseMockRecorder) GetPizzaByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPizzaByID", reflect.TypeOf((*MockIPizzaUsecase)(nil).GetPizzaByID), arg0)
}

// GetPizzaByName mocks base method.
func (m *MockIPizzaUsecase) GetPizzaByName(arg0 string) (entities.Pizza, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPizzaByName", arg0)
	ret0, _ := ret[0].(entities.Pizza)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPizzaByName indicates an expected call of GetPizzaByName.
func (mr *MockIPizzaUsecaseMockRecorder) GetPizzaByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPizzaByName", reflect.TypeOf((*MockIPizzaUsecase)(nil).GetPizzaByName), arg0)
}

// GetPizzas mocks base method.
func (m *MockIPizzaUsecase) GetPizzas() ([]entities.Pizza, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPizzas")
	ret0, _ := ret[0].([]entities.Pizza)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPizzas indicates an expected call of GetPizzas.
func (mr *MockIPizzaUsecaseMockRecorder) GetPizzas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPizzas", reflect.TypeOf((*MockIPizzaUsecase)(nil).GetPizzas))
}
